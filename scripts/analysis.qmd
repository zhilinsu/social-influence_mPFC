---
title: "Dorsomedial and ventromedial prefrontal cortex lesions differentially impact social influence and temporal impulsivity"
author: "Zhilin Su"
date: "2025"
date-format: "YYYY"
format: html
page-layout: full 
toc: true
toc-depth: 6
embed-resources: true 
theme: default
mainfont: Roboto 
fontsize: 12pt 
execute: 
  cache: true
---

# 0-1. Preparation 

```{r}
#| label: setting 
#| echo: false 
#| warning: false 

# Clear up 
rm(list = ls())

# Whether to re-save results? 0 for no; 1 for yes. 
is_save <- 0
```

```{r}
#| label: libraries  
#| echo: false 
#| warning: false 

# Load libraries ---- 
## Data wrangling 
library(dplyr)
library(readr)
library(forcats)
library(stringr)

## Visualisation 
library(ggplot2)
library(ggpubr)
library(ggtext) # to format the annotations on plots 
library(ggpattern)
library(ggsignif)
library(grid) # to control the grid parameters 
library(gridExtra)
library(patchwork)

## Statistics & modelling 
library(rstatix)
library(lme4)
library(lmerTest)
library(Hmisc) # rcorr
library(sjPlot)
library(parameters)
library(performance)
library(arm)
library(BayesFactor) 
library(emmeans)
library(effectsize) 
library(statpsych)

## Others 
library(finalfit) # p_tidy() 
library(kableExtra) 
library(mixedpower) # power analysis 
source("scripts/helper_functions/helper_functions.R")
source("scripts/helper_functions/rankBasedCommonFunctions.R")
source("scripts/helper_functions/spearmanSampler.R")
```

```{r}
#| label: plot_setting 
#| echo: false 
#| warning: false 

resolution <- 1200
plot_h <- 4
ax_text <- 12
ax_title <- 16
```

# 0-2. Exclusion 

```{r}
#| label: exclusion 
#| echo: false 
#| warning: false 

excl_id <- c(110, 111, 118, 158, 220, 261, 273)
excl_id_qnr <- c(106, 266)
```

```{r}
#| label: inclusion 
#| echo: false 
#| warning: false 

demogr <- read_csv("data/demographics.csv") |> 
	rename(id = ID_Code, group = `Group SD mPFC`, age = Age, gender = Gender) |> 
	dplyr::select(id, group, age, gender) |> 
	mutate(id = if_else(id == 2012, 299, id))

qnr <- read_csv("data/questionnaires.csv") |>  
		rename(id = ID_Code, 
				 iq = WTAW_Standard, 
				 trail_a = `Trail_Making_A_(seconds)'`, 
				 trail_b = `Trail_Making_B_(seconds)'`, 
				 ami_total = AMI_tot, 
				 ami_ba = AMI_BA, 
				 ami_sm = AMI_SM, 
				 ami_es = AMI_ES, 
				 bdi_total = BDI_total, 
				 edu = Education_years) |>  
	dplyr::select(id, iq, trail_a, trail_b, ami_total, ami_ba, ami_sm, ami_es, bdi_total, edu, 
								SD_similar_p1, SD_similar_p2) |>   
	mutate(id = if_else(id == 2012, 299, id))

inclusion_data <- demogr %>%
	left_join(qnr, by = "id") %>% 
	filter(!id %in% excl_id)

inclusion_data <- inclusion_data %>% 
	filter(group == 3 | group == 4 | (group == 1 & age >= 24 & age <= 76)) %>% 
	filter(group == 3 | group == 4 | (group == 1 & trail_b > 40))

# IDs that are included 
incl_id_hc <- inclusion_data %>%
	filter(group == 1) %>%
	pull(id)

incl_id_mpfc <- inclusion_data %>%
	filter(group == 3) %>%
	pull(id)

incl_id_lc <- inclusion_data %>%
	filter(group == 4) %>%
	pull(id)

if (is_save == 1) {
	saveRDS(incl_id_hc, file = "data/incl_id_hc.RDS")
	saveRDS(incl_id_mpfc, file = "data/incl_id_mpfc.RDS")
	saveRDS(incl_id_lc, file = "data/incl_id_lc.RDS")
}
```

# 0-3. Participants

## Healthy controls

71 healthy controls (`Group SD mPFC` label = 1) were included. 

## mPFC lesions

33 mPFC lesion patients (`Group SD mPFC` label = 3) were recruited.

## Lesion controls

17 lesion controls (`Group SD mPFC` label = 4) were recruited.

# 0-4. Data pre-processing 

```{r}
#| label: preprocessing_1 
#| echo: false 
#| warning: false 

# ~~~~ TASK DATA ~~~~ ---- 
# Load data 
load("data/sd_data_mpfc.RData")

sd_data <- abind::abind(sd_hc, sd_mpfc, sd_lc, along = 3)
other_k <- rbind(k_hc, k_mpfc, k_lc)

rm(sd_hc, sd_mpfc, sd_lc, k_hc, k_mpfc, k_lc)

# Convert data type 
other_k <- other_k %>%
	as_tibble() %>%
	mutate(id = as.numeric(id), 
				 other1_k = as.numeric(other1_k), 
				 other2_k = as.numeric(other2_k), 
				 other1_pref = as.factor(other1_pref), 
				 other2_pref = as.factor(other2_pref)) %>%
	# Pre-process the order of others 
	mutate(other_i_k = if_else(other1_pref == "i", other1_k, other2_k), 
				 other_p_k = if_else(other1_pref == "p", other1_k, other2_k))

# Exclude participants
incl_id_hc <- readRDS("data/incl_id_hc.rds")
incl_id_mpfc <- readRDS("data/incl_id_mpfc.rds")
incl_id_lc <- readRDS("data/incl_id_lc.rds")
incl_id <- c(incl_id_hc, incl_id_mpfc, incl_id_lc)

incl_condition <- sd_data[1, "id", ] %in% incl_id 
sd_data <- sd_data[,, incl_condition]
other_k <- other_k %>% 
	filter(id %in% incl_id)

# Extract metadata 
## dim(sd_data) = [# trials, # experimental parameters, # participants]
n_trials <- dim(sd_data)[1]
n_pt <- dim(sd_data)[3]

# Reshape data 
## Extract the ID  
id_vec <- vector("numeric", length = n_pt)
id_vec <- sd_data[1, "id", 1:n_pt]
names(id_vec) <- NULL

## Initialise a 3D array
sd_data_new <- array(0, dim = dim(sd_data))
col_names <- c("id", "s_dec_1", "s_rs_1", "s_rl_1", "s_dl_1", 
							 "so_dec_i", "o_rs_i", "o_rl_i", "o_dl_i", "o_dec_i", 
							 "s_dec_i", "s_rs_i", "s_rl_i", "s_dl_i", 
							 "so_dec_p", "o_rs_p", "o_rl_p", "o_dl_p", "o_dec_p", 
							 "s_dec_p", "s_rs_p", "s_rl_p", "s_dl_p")
colnames(sd_data_new) <- col_names

## Reshape data 
for (i in 1:n_pt) {
	
	other1_pref <- other_k$other1_pref[i]
	
	if (other1_pref == "i") {
		sd_data_new[, 1:5, i] <- sd_data[, 1:5, i] # from id to s_dl_1
		sd_data_new[, 6:14, i] <- sd_data[, 6:14, i] # from so_dec_i to s_dl_i 
		sd_data_new[, 15:23, i] <- sd_data[, 15:23, i] # from so_dec_p to s_dl_p 
	} else if (other1_pref == "p") {
		sd_data_new[, 1:5, i] <- sd_data[, 1:5, i] # from id to s_dl_1 
		sd_data_new[, 6:14, i] <- sd_data[, 15:23, i] # from so_dec_i to s_dl_i 
		sd_data_new[, 15:23, i] <- sd_data[, 6:14, i] # from so_dec_p to s_dl_p 
	}
}

# Calculate accuracy 
## Initialise a tibble to store results 
col_names <- c("id", "acc_i", "acc_p")
acc_mat <- matrix(nrow = n_pt, ncol = length(col_names))
colnames(acc_mat) <- col_names
acc_tb <- as_tibble(acc_mat)
acc_tb$id <- id_vec

rm(acc_mat)

## Initialise arrays 
self_decision <- array(0, dim = c(n_pt, n_trials)) 
reward_sooner <- array(0, dim = c(n_pt, n_trials))
reward_later <- array(0, dim = c(n_pt, n_trials))
delay_later <- array(0, dim = c(n_pt, n_trials))

value_later <- array(0, dim = c(n_pt, n_trials)) # subjective value of later offer
model_choice <- array(0, dim = c(n_pt, n_trials)) 

for (o_block in c("i", "p")) {
	
	other_k_vec <- other_k[, paste0("other_", o_block, "_k")]
	
	for (i_id in 1:n_pt) {
		self_decision[i_id, ] <- sd_data_new[, paste0("so_dec_", o_block), i_id] 
		reward_sooner[i_id, ] <- sd_data_new[, paste0("o_rs_", o_block), i_id]
		reward_later[i_id, ] <- sd_data_new[, paste0("o_rl_", o_block), i_id]
		delay_later[i_id, ] <- sd_data_new[, paste0("o_dl_", o_block), i_id] 
		
		k_value <- as.numeric(10^(other_k_vec[i_id, 1]))
			
		value_later[i_id, ] <- reward_later[i_id, ] / (1 + k_value * delay_later[i_id, ])
		
		model_choice[i_id, ] <- (value_later[i_id, ] > reward_sooner[i_id, ]) + 1
		
		acc <- mean(self_decision[i_id, ] == model_choice[i_id, ])
		acc_tb[i_id, paste0("acc_", o_block)] <- acc
	}
}

# ~~~~ DEMOGRAPHICS ~~~~ ---- 
demogr <- read_csv("data/demographics.csv") %>%
	rename(id = ID_Code, group = `Group SD mPFC`, age = Age, gender = Gender) %>% 
	dplyr::select(id, group, age, gender) %>%
	mutate(id = if_else(id == 2012, 299, id)) %>% 
	filter(id < 600) %>%
	filter(id %in% incl_id) %>%
	arrange(group, id) 

# ~~~~ QUESTIONNAIRES ~~~~ ---- 
qnr <- read_csv("data/questionnaires.csv") %>% 
	rename(id = ID_Code, 
				 iq = WTAW_Standard, 
				 trail_a = `Trail_Making_A_(seconds)'`, 
				 trail_b = `Trail_Making_B_(seconds)'`, 
				 ami_total = AMI_tot, 
				 ami_ba = AMI_BA, 
				 ami_sm = AMI_SM, 
				 ami_es = AMI_ES, 
				 bdi_total = BDI_total, 
				 edu = Education_years) %>% 
	dplyr::select(id, iq, trail_a, trail_b, ami_total, ami_ba, ami_sm, ami_es, bdi_total, edu,
								SD_similar_p1, SD_similar_p2) %>% 
	mutate(id = if_else(id == 2012, 299, id)) %>% 
	filter(id < 600) %>% 
	filter(id %in% incl_id) %>% 
	mutate(iq = as.numeric(iq), 
				 trail_a = replace(trail_a, is.nan(trail_a), NA),
				 trail_b = replace(trail_b, is.nan(trail_b), NA), 
				 ami_total = replace(ami_total, is.nan(ami_total), NA), 
				 ami_ba = replace(ami_ba, is.nan(ami_ba), NA),
				 ami_sm = replace(ami_sm, is.nan(ami_sm), NA),
				 ami_es = replace(ami_es, is.nan(ami_es), NA), 
				 bdi_total = replace(bdi_total, is.nan(bdi_total), NA), 
				 edu = replace(edu, is.nan(edu), NA), 
				 SD_similar_p1 = replace(SD_similar_p1, is.nan(SD_similar_p1), NA),
				 SD_similar_p2 = replace(SD_similar_p2, is.nan(SD_similar_p2), NA),
				 )

# ~~~~ KL DIVERGENCE ~~~~ ----
load("data/ku0_kld_hc.RData")
kld_hc <- result_tb
load("data/ku0_kld_mpfc.RData")
kld_mpfc <- result_tb
load("data/ku0_kld_lc.RData")
kld_lc <- result_tb
rm(result_tb)

## Merge tables 
kld <- rbind(kld_hc, kld_mpfc, kld_lc) %>%
	filter(id %in% incl_id) # exclude participants 

rm(kld_hc, kld_mpfc, kld_lc)

# ~~~~ MERGING ~~~~ ---- 
data_all <- demogr %>% 
	left_join(qnr, by = "id") %>% 
	left_join(acc_tb, by = "id") %>% 
	left_join(other_k, by = "id") %>% 
	left_join(kld, by = "id") %>%
	mutate(group = as.factor(group)) %>%
	filter(!id %in% excl_id)
```

```{r}
#| label: preprocessing_2
#| echo: false 
#| warning: false 

# Handle exceptions:
## when subjects had no Others of different preferences. 
# 
# Current measure: 
## Data were analysed for Others with the greatest distance between
## the subjectâ€™s own discount rate, and the Other's discount rate estimated by subject.

n_pt <- dim(data_all)[1]

for (i_id in 1:n_pt) {
	diff_i <- data_all[i_id, "self_1_km"] - data_all[i_id, "other_i_km"]
	diff_p <- data_all[i_id, "self_1_km"] - data_all[i_id, "other_p_km"]
	
	# no Impulsive other
	if (check_sign(diff_i, diff_p) && diff_i > 0) { 
		if (abs(diff_i) > abs(diff_p)) {
			data_all[i_id, "acc_p"] <- data_all[i_id, "acc_i"]
			data_all[i_id, "acc_i"] <- NA
		} else if (abs(diff_i) < abs(diff_p)) {
			data_all[i_id, "acc_i"] <- NA
		}
	}
	
	# no Patient other 
	if (check_sign(diff_i, diff_p) && diff_i < 0) { 
		if (abs(diff_i) > abs(diff_p)) {
			data_all[i_id, "acc_p"] <- NA
		} else if (abs(diff_i) < abs(diff_p)) {
			data_all[i_id, "acc_i"] <- data_all[i_id, "acc_p"]
			data_all[i_id, "acc_p"] <- NA
		}
	}
}

# ~~~~ FACTOR LEVELS ~~~~ ---- 
## For plotting, the order is: HC, mPFC, LC
data_all_plt <- data_all %>%
	mutate(group = factor(group, 
												levels = c(1, 3, 4), 
												labels = c("HC", "mPFC", "LC"), 
												ordered = FALSE))

## For modelling, the order is: mPFC, HC, LC
data_all <- data_all %>%
	mutate(group = factor(group, 
												levels = c(3, 1, 4), 
												labels = c("mPFC", "HC", "LC"), 
												ordered = FALSE))
```

# 0-5. Save the pre-processed data 

```{r}
#| label: save
#| echo: false 
#| warning: false 

if (is_save == 1) {
	saveRDS(data_all, file = "data/data_all.RData")
	write_csv(data_all, file = "data/data_all.csv")
	
	saveRDS(data_all_plt, file = "data/data_all_plt.RData")
	write_csv(data_all_plt, file = "data/data_all_plt.csv")
}
```

# 1. Demographics (**Table S1**)

```{r}
#| label: demographics 
#| echo: false
#| warning: false 

# Sample size   
demogr_sample_size <- calculate_sample_size(data_all, "id", "group")

# Age 
demogr_age <- get_summary(data_all, "age", "group")

## Linear regression 
lm_model <- lm(age ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for age") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()

# Gender
demogr_female <- calculate_females(data_all, "group")
chisq_test(data_all$gender, data_all$group)

## Logistic regression
data_gender <- data_all %>%
	dplyr::select(id, group, gender) %>% 
	mutate(bi_gender = gender - 1)

logit_model <- glm(bi_gender ~ group, family = binomial(link = "logit"), data = data_gender)
logit_model_stats <- stats_lm(logit_model)
row.names(logit_model_stats) <- c("Intercept",
																	"Group (HC vs mPFC)",
																	"Group (LC vs mPFC)")

kable(logit_model_stats, align = rep("c", 6),
			caption = "Binary logistic regression for gender") %>%
	kable_styling()
```

## 1.1. Education years 

```{r}
#| label: education 
#| echo: false 
#| warning: false 

edu_sample_size <- calculate_sample_size(data_all, "edu", "group")
edu_summary <- get_summary(data_all, "edu", "group")
edu_norm <- check_normality(data_all, "edu", "group")

# Linear regression
lm_model <- lm(edu ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for education years") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()
```

## 1.2. Apathy-Motivation Index (AMI)

```{r}
#| label: ami 
#| echo: false 
#| warning: false

ami_total_sample_size <- calculate_sample_size(data_all, "ami_total", "group")
ami_total_summary <- get_summary(data_all, "ami_total", "group")
ami_total_norm <- check_normality(data_all, "ami_total", "group")

## Linear regression
lm_model <- lm(ami_total ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for AMI total") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()
```

## 1.3. Beck Depression Inventory (BDI)

```{r}
#| label: bdi 
#| echo: false 
#| warning: false

bdi_sample_size <- calculate_sample_size(data_all, "bdi_total", "group")
bdi_summary <- get_summary(data_all, "bdi_total", "group")
bdi_norm <- check_normality(data_all, "bdi_total", "group")

## Linear regression
lm_model <- lm(bdi_total ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for BDI") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()
```

## 1.4. Executive function (Trail Making Test)

```{r}
#| label: trail_making
#| echo: false
#| warning: false

# Trail A
trail_a_sample_size <- calculate_sample_size(data_all, "trail_a", "group")
trail_a_summary <- get_summary(data_all, "trail_a", "group")
trail_a_norm <- check_normality(data_all, "trail_a", "group")

## Linear regression 
lm_model <- lm(trail_a ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for Trail Making Test A") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()

# Trail B
trail_b_sample_size <- calculate_sample_size(data_all, "trail_b", "group")
trail_b_summary <- get_summary(data_all, "trail_b", "group")
trail_b_norm <- check_normality(data_all, "trail_b", "group")

## Linear regression 
lm_model <- lm(trail_b ~ group, data = data_all)
lm_model_stats <- stats_lm(lm_model)
row.names(lm_model_stats) <- c("Intercept", 
															 "Group (HC vs mPFC)", 
															 "Group (LC vs mPFC)")

r_squared <- summary(lm_model)$r.squared
adjusted_r_squared <- summary(lm_model)$adj.r.squared

kable(lm_model_stats, align = rep("c", 6),
			caption = "Linear regression for Trail Making Test B") %>%
	footnote(general = paste("R <sup>2</sup> / Adjusted R <sup>2</sup>:",
													 pvalr(r_squared, html = TRUE), "/", 
													 pvalr(adjusted_r_squared, html = TRUE)),
					 general_title = "",
           escape = FALSE) %>%
	kable_styling()
```

# 2. Accuracy 
## 2.1. Preparation
```{r}
#| label: accuracy_preparation
#| echo: false
#| warning: false

# Preparation 
data_acc_1 <- data_all %>% 
	dplyr::select(id, group, acc_i) %>% 
	rename(acc = acc_i) %>% 
	mutate(other_pref = "i", 
				 other_pref = as.factor(other_pref)) 

data_acc_2 <- data_all %>% 
	dplyr::select(id, group, acc_p) %>% 
	rename(acc = acc_p) %>% 
	mutate(other_pref = "p", 
				 other_pref = as.factor(other_pref)) 

data_acc <- rbind(data_acc_1, data_acc_2) %>%
	mutate(acc = acc * 100) %>%
	mutate(other_pref = factor(other_pref, 
														 levels = c("i", "p"), 
														 labels = c("impulsive", "patient"),
														 ordered = FALSE)) %>%
	mutate(condition1 = interaction(group, other_pref, sep = ":")) %>%
	arrange(id, other_pref)

rm(data_acc_1, data_acc_2)

# Sum-to-zero coding of other's preferences
contrasts(data_acc$other_pref) <- c(-1, 1)

# Preparation for plotting
data_acc_plt_1 <- data_all_plt %>% 
	dplyr::select(id, group, acc_i) %>% 
	rename(acc = acc_i) %>% 
	mutate(other_pref = "i", 
				 other_pref = as.factor(other_pref)) 

data_acc_plt_2 <- data_all_plt %>% 
	dplyr::select(id, group, acc_p) %>% 
	rename(acc = acc_p) %>% 
	mutate(other_pref = "p", 
				 other_pref = as.factor(other_pref)) 

data_acc_plt <- rbind(data_acc_plt_1, data_acc_plt_2) %>%
	mutate(acc = acc * 100) %>%
	mutate(other_pref = factor(other_pref, 
														 levels = c("i", "p"), 
														 labels = c("impulsive", "patient"),
														 ordered = FALSE)) %>%
	mutate(condition1 = interaction(group, other_pref, sep = ":")) %>%
	arrange(id, other_pref)

rm(data_acc_plt_1, data_acc_plt_2)
```

## 2.2. Descriptive 

```{r}
#| label: accuracy_descriptive 
#| echo: false 
#| warning: false 

# Summary 
acc_sample_size <- calculate_sample_size(data_acc, "acc", "condition1")
acc_summary <- get_summary(data_acc, "acc", "condition1")

summary_table <- tibble(
	"Accuracy" = c("Impulsive Other", "Patient Other"), 
	"Healthy controls mean (SE)" = c(paste0(specify_decimal(acc_summary[["HC:impulsive"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["HC:impulsive"]]$se, 3),
															 ")"),
																paste0(specify_decimal(acc_summary[["HC:patient"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["HC:patient"]]$se, 3),
															 ")")), 
	"mPFC lesions mean (SE)" = c(paste0(specify_decimal(acc_summary[["mPFC:impulsive"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["mPFC:impulsive"]]$se, 3),
															 ")"),
																paste0(specify_decimal(acc_summary[["mPFC:patient"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["mPFC:patient"]]$se, 3),
															 ")")), 
	"Lesion controls mean (SE)" = c(paste0(specify_decimal(acc_summary[["LC:impulsive"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["LC:impulsive"]]$se, 3),
															 ")"),
																paste0(specify_decimal(acc_summary[["LC:patient"]]$mean, 3), 
															 " (", 
															 specify_decimal(acc_summary[["LC:patient"]]$se, 3),
															 ")"))
	)

kable(summary_table, 
      align = c("l", "c", "c"), 
      caption = "Summary table of learning accuracy") %>% 
	kable_styling()

# Binomial test
## HC - impulsive 
acc_hc_impulsive_all <- data_acc %>%
	filter(group == "HC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_hc_impulsive_above50 <- data_acc %>%
	filter(group == "HC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_ha_impulsive_binom <- binom.test(x = acc_hc_impulsive_above50, 
																		 n = acc_hc_impulsive_all, 
																		 p = 0.5, alternative = "greater")

## mPFC - impulsive
acc_mpfc_impulsive_all <- data_acc %>%
	filter(group == "mPFC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_mpfc_impulsive_above50 <- data_acc %>%
	filter(group == "mPFC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_mpfc_impulsive_binom <- binom.test(x = acc_mpfc_impulsive_above50,
																			 n = acc_mpfc_impulsive_all,
																			 p = 0.5, alternative = "greater")

## LC - impulsive 
acc_lc_impulsive_all <- data_acc %>%
	filter(group == "LC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_lc_impulsive_above50 <- data_acc %>%
	filter(group == "LC" & other_pref == "impulsive") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_lc_impulsive_binom <- binom.test(x = acc_lc_impulsive_above50,
																		 n = acc_lc_impulsive_all,
																		 p = 0.5, alternative = "greater")

## HC - patient 
acc_hc_patient_all <- data_acc %>%
	filter(group == "HC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_hc_patient_above50 <- data_acc %>%
	filter(group == "HC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_ha_patient_binom <- binom.test(x = acc_hc_patient_above50,
																	 n = acc_hc_patient_all,
																	 p = 0.5, alternative = "greater")

## mPFC - patient
acc_mpfc_patient_all <- data_acc %>%
	filter(group == "mPFC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_mpfc_patient_above50 <- data_acc %>%
	filter(group == "mPFC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_mpfc_patient_binom <- binom.test(x = acc_mpfc_patient_above50,
																		 n = acc_mpfc_patient_all,
																		 p = 0.5, alternative = "greater")

## LC - patient  
acc_lc_patient_all <- data_acc %>%
	filter(group == "LC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	count() %>% 
	pull(n)

acc_lc_patient_above50 <- data_acc %>%
	filter(group == "LC" & other_pref == "patient") %>% 
	filter(!is.na(acc)) %>%
	filter(acc > 50) %>% 
	count() %>% 
	pull(n)

acc_lc_patient_binom <- binom.test(x = acc_lc_patient_above50,
																	 n = acc_lc_patient_all,
																	 p = 0.5, alternative = "greater")
```

## 2.3. Linear mixed-effects models LMM1a-1c (**Table S2**)

```{r}
#| label: accuracy_lmm 
#| echo: false 
#| warning: false 

# LMM1a 
lmer_model <- lmer(acc ~ 1 + group * other_pref + (1|id), data = data_acc)

acc_lmer_table_full <- model_parameters(lmer_model)

acc_lmer_table <- acc_lmer_table_full %>%
	filter(Effects == "fixed") %>% 
	dplyr::select(!c(df_error, Effects, Group, CI)) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupHC", replacement = "Group (HC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupLC", replacement = "Group (LC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "other_pref1", replacement = "Others (patient vs impulsive)"))
	
print(acc_lmer_table)

## Post-hoc comparisons 
post_hoc_acc <- contrast(emmeans(lmer_model, ~ group), "pairwise", adjust = NULL)

print(post_hoc_acc)

# LMM1b (control for depression)
data_bdi <- data_all %>%
	dplyr::select(id, group, bdi_total) %>%
	mutate(id = as.factor(id))

data_acc <- data_acc %>%
	mutate(id = as.factor(id))

data_acc_bdi <- data_acc %>%
	left_join(data_bdi, by = c("id", "group"))

lmer_model_bdi <- lmer(acc ~ 1 + group * other_pref + bdi_total + (1|id), data = data_acc_bdi)

acc_lmer_table_full_bdi <- model_parameters(lmer_model_bdi)

acc_lmer_table_bdi <- acc_lmer_table_full_bdi %>%
	filter(Effects == "fixed") %>% 
	dplyr::select(!c(df_error, Effects, Group, CI)) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupHC", replacement = "Group (HC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupLC", replacement = "Group (LC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "other_pref1", replacement = "Others (patient vs impulsive)")) |> 
	mutate(Parameter = str_replace(Parameter, pattern = "bdi_total", replacement = "BDI"))

print(acc_lmer_table_bdi)

# LMM1c (control for apathy)
data_ami <- data_all %>%
	dplyr::select(id, group, ami_total) %>%
	mutate(id = as.factor(id))

data_acc_ami <- data_acc %>%
	left_join(data_ami, by = c("id", "group"))

lmer_model_ami <- lmer(acc ~ 1 + group * other_pref + ami_total + (1|id), data = data_acc_ami)

acc_lmer_table_full_ami <- model_parameters(lmer_model_ami)

acc_lmer_table_ami <- acc_lmer_table_full_ami %>%
	filter(Effects == "fixed") %>% 
	dplyr::select(!c(df_error, Effects, Group, CI)) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupHC", replacement = "Group (HC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "groupLC", replacement = "Group (LC vs mPFC)")) %>%
	mutate(Parameter = str_replace(Parameter, pattern = "other_pref1", replacement = "Others (patient vs impulsive)")) |> 
	mutate(Parameter = str_replace(Parameter, pattern = "ami_total", replacement = "AMI"))

print(acc_lmer_table_ami)
```

## 2.4 Bayes factor 

```{r}
#| label: accuracy_bayes 
#| echo: false 
#| warning: false 

data_acc_bayes <- data_acc %>%
	mutate(id = as.factor(id)) %>% 
	filter(!is.na(acc))

data_acc_overall_bayes <- data_acc_bayes %>% 
	group_by(id, group) %>% 
	summarise(mean_acc = mean(acc), .groups = "drop")

# BF_01 for differences between mPFC and LC
set.seed(1213)

bf10_acc_mpfc_lc_overall <- ttestBF(data_acc_overall_bayes$mean_acc[data_acc_overall_bayes$group == "mPFC"], 
																		data_acc_overall_bayes$mean_acc[data_acc_overall_bayes$group == "LC"])

bf01_acc_mpfc_lc_overall <- 1 / bf10_acc_mpfc_lc_overall
bf01_acc_mpfc_lc_overall <- extractBF(bf01_acc_mpfc_lc_overall)
```

## 2.4. Plot (**Figure 2c**)

```{r}
#| label: fig-accuracy
#| echo: false 
#| warning: false 
#| fig-cap: "Learning performances." 
#| fig-width: 3.4
#| fig-height: 4

# Preparation 
vars <- "acc"

plt_data <- data_acc_plt %>% 
	group_by(group, other_pref, condition1) %>% 
	filter(!is.na(get(vars))) %>%
	summarise(n = n(), 
						mean = mean(get(vars), na.rm = TRUE), 
						sd = sd(get(vars), na.rm = TRUE), 
						se = sd / sqrt(n)) %>% 
	ungroup()

# ggplot for manuscript
set.seed(1213)
plt <- ggplot(plt_data, aes(x = group, y = mean, group = condition1)) +
	geom_jitter(data = data_acc_plt,
							aes(x = group, y = get(vars), 
									colour = other_pref, 
									alpha = other_pref), 
							position = position_jitterdodge(dodge.width = 0.75, 
																							jitter.height = 0, 
																							jitter.width = 0.3), 
							size = 1, stroke = 0.5,
							show.legend = FALSE) + 
	geom_errorbar(aes(ymin = mean - se, 
										ymax = mean + se), 
								position = position_dodge(0.75), 
								colour = "black", width = 0, size = 0.25) + 
	geom_jitter(aes(y = mean, 
									fill = other_pref), 
							position = position_dodge(0.75), 
							colour = "black", shape = 21, stroke = 0.25, size = 2) + 
	scale_x_discrete(labels = c("Healthy\ncontrols", 
															"mPFC\nlesions", 
															"Lesion\ncontrols")) +
	coord_cartesian(ylim = c(50, 105), expand = FALSE) +  
	labs(x = NULL, y = "Learning accuracy (%)") +
	scale_fill_manual(name = "other_pref", 
										limits = c("impulsive", "patient"), 
										values = c("#5491cb", "#fcd466"), 
										labels = c("Impulsive", "Patient")) +
	scale_colour_manual(name = "other_pref",
											limits = c("impulsive", "patient"),
											values = c("#abdeff", "#ffeacb")) +
	scale_alpha_manual(name = "other_pref",
											limits = c("impulsive", "patient"),
											values = c(0.4, 0.4)) + 
	theme_classic() +
	theme(text = element_text(family = "Arial"),
				legend.title = element_blank(),
				legend.key = element_rect(linewidth = c(2, 2), colour = NA),
				axis.text.x = element_text(size = 10),
				axis.text.y = element_markdown(size = 10), 
				axis.title.x = element_markdown(size = 10), 
				axis.title.y = element_markdown(size = 12, lineheight = 1.2), 
				legend.text = element_text(size = 8, margin = margin(l = 0)),
				legend.key.height = unit(0.3, "cm"),
				legend.key.width = unit(0.3, "cm"),
				legend.key.spacing.y = unit(0.1, "cm"), 
				legend.justification = c(0, 0.5)) +
	geom_signif(xmin = 1, xmax = 2,
							y_position = 96.5, tip_length = 0.01, vjust = 0.5, size = 0.25,
							textsize = 3, family = "Arial",
							annotation = "**") + 
	geom_signif(xmin = 1, xmax = 3,
							y_position = 92.5, tip_length = 0.01, vjust = 0.5, size = 0.25,
							textsize = 3, family = "Arial",
							annotation = "**")

print(plt) 
```

# 3. Mean of discounting distribution (*km*)
## 3.1. Preparation 

```{r}
#| label: km 
#| echo: false 
#| warning: false 

data_km <- data_all %>% 
	dplyr::select(id, group, self_1_km)

data_km_plt <- data_all_plt %>%
	dplyr::select(id, group, self_1_km)
```

## 3.2. Descriptive 

```{r}
#| label: km_descriptive 
#| echo: false 
#| warning: false 

# Summary 
km_sample_size <- calculate_sample_size(data_km, "self_1_km", "group")
km_summary <- get_summary(data_km, "self_1_km", "group")

# ANOVA1
km_lm_model <- lm(self_1_km ~ group, data = data_km)
km_anova <- anova(km_lm_model)
print(km_anova)

## Effect size 
options(es.use_symbols = TRUE) # get nice symbols when printing 
km_lm_model_eta <- eta_squared(km_lm_model)

ci.etasqr(0.05, 0.10, 2, 118)

## Post-hoc comparisons
emmeans(km_lm_model, pairwise ~ group, adjust = "none")

# ANOVA2 (control for depression)
data_km_bdi <- data_km %>%
	mutate(id = as.factor(id)) %>%
	left_join(data_bdi, by = c("id", "group"))

km_lm_model_bdi <- lm(self_1_km ~ bdi_total + group, data = data_km_bdi)

km_anova_bdi <- anova(km_lm_model_bdi)
print(km_anova_bdi)

km_anova_bdi_eta <- eta_squared(km_lm_model_bdi)
ci.etasqr(0.05, 0.09, 2, 115) # group
ci.etasqr(0.05, 0.004, 1, 115) # bdi

# ANOVA3 (control for apathy)
data_km_ami <- data_km %>%
	mutate(id = as.factor(id)) %>%
	left_join(data_ami, by = c("id", "group"))

km_lm_model_ami <- lm(self_1_km ~ ami_total + group, data = data_km_ami)

km_anova_ami <- anova(km_lm_model_ami)
print(km_anova_ami)

km_anova_ami_eta <- eta_squared(km_lm_model_ami)
ci.etasqr(0.05, 0.08, 2, 115) # group
ci.etasqr(0.05, 0.02, 1, 115) # ami 
```

## 3.3. Bayes factor

```{r}
#| label: km_bayes 
#| echo: false 
#| warning: false 

```

## 3.4. Plot (**Figure 3b** left)

```{r}
#| label: fig-km
#| echo: false 
#| warning: false 
#| fig-cap: "Mean of discounting distribution." 
#| fig-width: 2.4
#| fig-height: 4


```

# 4. Standard deviation of discounting distribution (*ku*)
## 4.1. Preparation 
## 4.2. Descriptive 
## 4.3. Plot (**Figure 3b** right)